#pragma kernel WireWorld

RWStructuredBuffer<int> _Input;
RWStructuredBuffer<int> _Result;

int _Size;

static const int S_EMPTY = 0;
static const int S_WIRE = 1;
static const int S_HEAD = 2;
static const int S_TAIL = 3;

//Cell Coord To Index Value
uint cctoi(float2 coord){
	//Check if coordinate is valid
    if((coord.x * _Size + coord.y)<0 || (coord.x * _Size + coord.y)>48)
        return 0;
    else
        return _Input[uint (coord.x * _Size + coord.y)];
}

[numthreads(8,8,1)]
void WireWorld (uint3 id : SV_DispatchThreadID)
{
    //Directional Vector
    float3 dvec = float3(1,0,-1);

    //Current Coordinate
    float2 cc = id.xy;

    // current state
    int currentstate = cctoi(cc);

    int neighbors[8];
    // Moor neighbourhood
    neighbors[0] = cctoi(cc+dvec.zz); neighbors[1] = cctoi(cc+dvec.yz); neighbors[2] = cctoi(cc+dvec.xz);
    neighbors[3] = cctoi(cc+dvec.zy);                                   neighbors[4] = cctoi(cc+dvec.xy);
    neighbors[5] = cctoi(cc+dvec.zx); neighbors[6] = cctoi(cc+dvec.yx); neighbors[7] = cctoi(cc+dvec.xx);

	/*
	***Rules***
	1) Empty Cells Stay Empty
	2) Electron Heads always become Electron Tails
	3) Electron Tail Becomes Wire
	4) Wire stays Wire unless it has 2 or more neighbours that are Electron Heads. It becomes an Electron Head in that case.
	*/

    int nextstate = 0;
    if (currentstate == S_EMPTY)
    {
    }
    else if (currentstate == S_HEAD)
    {
        nextstate = S_TAIL;
    }
    else if (currentstate == S_TAIL)
    {
        nextstate = S_WIRE;
    }
    else if (currentstate == S_WIRE)
    {
        int num = 0;
		for (int i = 0; i < 8; ++i) { if (neighbors[i] == S_HEAD) { ++num; if (num > 2) break; } }
		if (num == 1 || num == 2)
			nextstate = S_HEAD;
		else
			nextstate = S_WIRE;
	}

    _Result[id.x*_Size +id.y] = nextstate;
}
